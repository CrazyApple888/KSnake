//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: snakes.proto

package ru.nsu.fit.isachenko.snakegame;

@kotlin.jvm.JvmSynthetic
inline fun gameMessage(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.newBuilder()).apply { block() }._build()
object GameMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage = _builder.build()

    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     */
    var msgSeq: kotlin.Long
      @JvmName("getMsgSeq")
      get() = _builder.getMsgSeq()
      @JvmName("setMsgSeq")
      set(value) {
        _builder.setMsgSeq(value)
      }
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     */
    fun clearMsgSeq() {
      _builder.clearMsgSeq()
    }
    /**
     * <pre>
     * Порядковый номер сообщения, уникален для отправителя в пределах игры, монотонно возрастает
     * </pre>
     *
     * <code>required int64 msg_seq = 1;</code>
     * @return Whether the msgSeq field is set.
     */
    fun hasMsgSeq(): kotlin.Boolean {
      return _builder.hasMsgSeq()
    }

    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     */
    var senderId: kotlin.Int
      @JvmName("getSenderId")
      get() = _builder.getSenderId()
      @JvmName("setSenderId")
      set(value) {
        _builder.setSenderId(value)
      }
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     */
    fun clearSenderId() {
      _builder.clearSenderId()
    }
    /**
     * <pre>
     * ID игрока-отправителя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 sender_id = 10;</code>
     * @return Whether the senderId field is set.
     */
    fun hasSenderId(): kotlin.Boolean {
      return _builder.hasSenderId()
    }

    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     */
    var receiverId: kotlin.Int
      @JvmName("getReceiverId")
      get() = _builder.getReceiverId()
      @JvmName("setReceiverId")
      set(value) {
        _builder.setReceiverId(value)
      }
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     */
    fun clearReceiverId() {
      _builder.clearReceiverId()
    }
    /**
     * <pre>
     * ID игрока-получателя этого сообщения (обязательно для AckMsg и RoleChangeMsg)
     * </pre>
     *
     * <code>optional int32 receiver_id = 11;</code>
     * @return Whether the receiverId field is set.
     */
    fun hasReceiverId(): kotlin.Boolean {
      return _builder.hasReceiverId()
    }

    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    var ping: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.PingMsg
      @JvmName("getPing")
      get() = _builder.getPing()
      @JvmName("setPing")
      set(value) {
        _builder.setPing(value)
      }
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     */
    fun clearPing() {
      _builder.clearPing()
    }
    /**
     * <code>.snakes.GameMessage.PingMsg ping = 2;</code>
     * @return Whether the ping field is set.
     */
    fun hasPing(): kotlin.Boolean {
      return _builder.hasPing()
    }

    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    var steer: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.SteerMsg
      @JvmName("getSteer")
      get() = _builder.getSteer()
      @JvmName("setSteer")
      set(value) {
        _builder.setSteer(value)
      }
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     */
    fun clearSteer() {
      _builder.clearSteer()
    }
    /**
     * <code>.snakes.GameMessage.SteerMsg steer = 3;</code>
     * @return Whether the steer field is set.
     */
    fun hasSteer(): kotlin.Boolean {
      return _builder.hasSteer()
    }

    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    var ack: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AckMsg
      @JvmName("getAck")
      get() = _builder.getAck()
      @JvmName("setAck")
      set(value) {
        _builder.setAck(value)
      }
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     */
    fun clearAck() {
      _builder.clearAck()
    }
    /**
     * <code>.snakes.GameMessage.AckMsg ack = 4;</code>
     * @return Whether the ack field is set.
     */
    fun hasAck(): kotlin.Boolean {
      return _builder.hasAck()
    }

    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    var state: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.StateMsg
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     */
    fun clearState() {
      _builder.clearState()
    }
    /**
     * <code>.snakes.GameMessage.StateMsg state = 5;</code>
     * @return Whether the state field is set.
     */
    fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    var announcement: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AnnouncementMsg
      @JvmName("getAnnouncement")
      get() = _builder.getAnnouncement()
      @JvmName("setAnnouncement")
      set(value) {
        _builder.setAnnouncement(value)
      }
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     */
    fun clearAnnouncement() {
      _builder.clearAnnouncement()
    }
    /**
     * <code>.snakes.GameMessage.AnnouncementMsg announcement = 6;</code>
     * @return Whether the announcement field is set.
     */
    fun hasAnnouncement(): kotlin.Boolean {
      return _builder.hasAnnouncement()
    }

    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    var join: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.JoinMsg
      @JvmName("getJoin")
      get() = _builder.getJoin()
      @JvmName("setJoin")
      set(value) {
        _builder.setJoin(value)
      }
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     */
    fun clearJoin() {
      _builder.clearJoin()
    }
    /**
     * <code>.snakes.GameMessage.JoinMsg join = 7;</code>
     * @return Whether the join field is set.
     */
    fun hasJoin(): kotlin.Boolean {
      return _builder.hasJoin()
    }

    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    var error: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.ErrorMsg
      @JvmName("getError")
      get() = _builder.getError()
      @JvmName("setError")
      set(value) {
        _builder.setError(value)
      }
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     */
    fun clearError() {
      _builder.clearError()
    }
    /**
     * <code>.snakes.GameMessage.ErrorMsg error = 8;</code>
     * @return Whether the error field is set.
     */
    fun hasError(): kotlin.Boolean {
      return _builder.hasError()
    }

    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    var roleChange: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.RoleChangeMsg
      @JvmName("getRoleChange")
      get() = _builder.getRoleChange()
      @JvmName("setRoleChange")
      set(value) {
        _builder.setRoleChange(value)
      }
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     */
    fun clearRoleChange() {
      _builder.clearRoleChange()
    }
    /**
     * <code>.snakes.GameMessage.RoleChangeMsg role_change = 9;</code>
     * @return Whether the roleChange field is set.
     */
    fun hasRoleChange(): kotlin.Boolean {
      return _builder.hasRoleChange()
    }
    val typeCase: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.TypeCase
      @JvmName("getTypeCase")
      get() = _builder.getTypeCase()

    fun clearType() {
      _builder.clearType()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun pingMsg(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.PingMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.PingMsg =
    ru.nsu.fit.isachenko.snakegame.GameMessageKt.PingMsgKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.PingMsg.newBuilder()).apply { block() }._build()
  object PingMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.PingMsg.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.PingMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.PingMsg = _builder.build()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun steerMsg(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.SteerMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.SteerMsg =
    ru.nsu.fit.isachenko.snakegame.GameMessageKt.SteerMsgKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.SteerMsg.newBuilder()).apply { block() }._build()
  object SteerMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.SteerMsg.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.SteerMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.SteerMsg = _builder.build()

      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       */
      var direction: ru.nsu.fit.isachenko.snakegame.SnakesProto.Direction
        @JvmName("getDirection")
        get() = _builder.getDirection()
        @JvmName("setDirection")
        set(value) {
          _builder.setDirection(value)
        }
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       */
      fun clearDirection() {
        _builder.clearDirection()
      }
      /**
       * <pre>
       * Куда повернуть на следующем шаге
       * </pre>
       *
       * <code>required .snakes.Direction direction = 1;</code>
       * @return Whether the direction field is set.
       */
      fun hasDirection(): kotlin.Boolean {
        return _builder.hasDirection()
      }
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun ackMsg(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.AckMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AckMsg =
    ru.nsu.fit.isachenko.snakegame.GameMessageKt.AckMsgKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AckMsg.newBuilder()).apply { block() }._build()
  object AckMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AckMsg.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AckMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AckMsg = _builder.build()
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun stateMsg(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.StateMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.StateMsg =
    ru.nsu.fit.isachenko.snakegame.GameMessageKt.StateMsgKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.StateMsg.newBuilder()).apply { block() }._build()
  object StateMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.StateMsg.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.StateMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.StateMsg = _builder.build()

      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      var state: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameState
        @JvmName("getState")
        get() = _builder.getState()
        @JvmName("setState")
        set(value) {
          _builder.setState(value)
        }
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       */
      fun clearState() {
        _builder.clearState()
      }
      /**
       * <pre>
       * Состояние игрового поля
       * </pre>
       *
       * <code>required .snakes.GameState state = 1;</code>
       * @return Whether the state field is set.
       */
      fun hasState(): kotlin.Boolean {
        return _builder.hasState()
      }
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun announcementMsg(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.AnnouncementMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AnnouncementMsg =
    ru.nsu.fit.isachenko.snakegame.GameMessageKt.AnnouncementMsgKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AnnouncementMsg.newBuilder()).apply { block() }._build()
  object AnnouncementMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AnnouncementMsg.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AnnouncementMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AnnouncementMsg = _builder.build()

      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       */
      var players: ru.nsu.fit.isachenko.snakegame.SnakesProto.GamePlayers
        @JvmName("getPlayers")
        get() = _builder.getPlayers()
        @JvmName("setPlayers")
        set(value) {
          _builder.setPlayers(value)
        }
      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       */
      fun clearPlayers() {
        _builder.clearPlayers()
      }
      /**
       * <pre>
       * Текущие игроки
       * </pre>
       *
       * <code>required .snakes.GamePlayers players = 1;</code>
       * @return Whether the players field is set.
       */
      fun hasPlayers(): kotlin.Boolean {
        return _builder.hasPlayers()
      }

      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       */
      var config: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameConfig
        @JvmName("getConfig")
        get() = _builder.getConfig()
        @JvmName("setConfig")
        set(value) {
          _builder.setConfig(value)
        }
      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       */
      fun clearConfig() {
        _builder.clearConfig()
      }
      /**
       * <pre>
       * Параметры игры
       * </pre>
       *
       * <code>required .snakes.GameConfig config = 2;</code>
       * @return Whether the config field is set.
       */
      fun hasConfig(): kotlin.Boolean {
        return _builder.hasConfig()
      }

      /**
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       *
       * <code>optional bool can_join = 3 [default = true];</code>
       */
      var canJoin: kotlin.Boolean
        @JvmName("getCanJoin")
        get() = _builder.getCanJoin()
        @JvmName("setCanJoin")
        set(value) {
          _builder.setCanJoin(value)
        }
      /**
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       *
       * <code>optional bool can_join = 3 [default = true];</code>
       */
      fun clearCanJoin() {
        _builder.clearCanJoin()
      }
      /**
       * <pre>
       * Можно ли новому игроку присоединиться к игре (есть ли место на поле)
       * </pre>
       *
       * <code>optional bool can_join = 3 [default = true];</code>
       * @return Whether the canJoin field is set.
       */
      fun hasCanJoin(): kotlin.Boolean {
        return _builder.hasCanJoin()
      }
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun joinMsg(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.JoinMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.JoinMsg =
    ru.nsu.fit.isachenko.snakegame.GameMessageKt.JoinMsgKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.JoinMsg.newBuilder()).apply { block() }._build()
  object JoinMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.JoinMsg.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.JoinMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.JoinMsg = _builder.build()

      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       */
      var playerType: ru.nsu.fit.isachenko.snakegame.SnakesProto.PlayerType
        @JvmName("getPlayerType")
        get() = _builder.getPlayerType()
        @JvmName("setPlayerType")
        set(value) {
          _builder.setPlayerType(value)
        }
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       */
      fun clearPlayerType() {
        _builder.clearPlayerType()
      }
      /**
       * <pre>
       * Тип присоединяющегося игрока
       * </pre>
       *
       * <code>optional .snakes.PlayerType player_type = 1 [default = HUMAN];</code>
       * @return Whether the playerType field is set.
       */
      fun hasPlayerType(): kotlin.Boolean {
        return _builder.hasPlayerType()
      }

      /**
       * <pre>
       * Если хотим только понаблюдать, но не играть
       * </pre>
       *
       * <code>optional bool only_view = 2 [default = false];</code>
       */
      var onlyView: kotlin.Boolean
        @JvmName("getOnlyView")
        get() = _builder.getOnlyView()
        @JvmName("setOnlyView")
        set(value) {
          _builder.setOnlyView(value)
        }
      /**
       * <pre>
       * Если хотим только понаблюдать, но не играть
       * </pre>
       *
       * <code>optional bool only_view = 2 [default = false];</code>
       */
      fun clearOnlyView() {
        _builder.clearOnlyView()
      }
      /**
       * <pre>
       * Если хотим только понаблюдать, но не играть
       * </pre>
       *
       * <code>optional bool only_view = 2 [default = false];</code>
       * @return Whether the onlyView field is set.
       */
      fun hasOnlyView(): kotlin.Boolean {
        return _builder.hasOnlyView()
      }

      /**
       * <pre>
       * Имя игрока
       * </pre>
       *
       * <code>required string name = 3;</code>
       */
      var name: kotlin.String
        @JvmName("getName")
        get() = _builder.getName()
        @JvmName("setName")
        set(value) {
          _builder.setName(value)
        }
      /**
       * <pre>
       * Имя игрока
       * </pre>
       *
       * <code>required string name = 3;</code>
       */
      fun clearName() {
        _builder.clearName()
      }
      /**
       * <pre>
       * Имя игрока
       * </pre>
       *
       * <code>required string name = 3;</code>
       * @return Whether the name field is set.
       */
      fun hasName(): kotlin.Boolean {
        return _builder.hasName()
      }
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun errorMsg(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.ErrorMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.ErrorMsg =
    ru.nsu.fit.isachenko.snakegame.GameMessageKt.ErrorMsgKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.ErrorMsg.newBuilder()).apply { block() }._build()
  object ErrorMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.ErrorMsg.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.ErrorMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.ErrorMsg = _builder.build()

      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       */
      var errorMessage: kotlin.String
        @JvmName("getErrorMessage")
        get() = _builder.getErrorMessage()
        @JvmName("setErrorMessage")
        set(value) {
          _builder.setErrorMessage(value)
        }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       */
      fun clearErrorMessage() {
        _builder.clearErrorMessage()
      }
      /**
       * <pre>
       * Строковое сообщение, нужно отобразить его на экране, не блокируя работу программы
       * </pre>
       *
       * <code>required string error_message = 1;</code>
       * @return Whether the errorMessage field is set.
       */
      fun hasErrorMessage(): kotlin.Boolean {
        return _builder.hasErrorMessage()
      }
    }
  }
  @kotlin.jvm.JvmSynthetic
  inline fun roleChangeMsg(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.RoleChangeMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.RoleChangeMsg =
    ru.nsu.fit.isachenko.snakegame.GameMessageKt.RoleChangeMsgKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.RoleChangeMsg.newBuilder()).apply { block() }._build()
  object RoleChangeMsgKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    class Dsl private constructor(
      @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.RoleChangeMsg.Builder
    ) {
      companion object {
        @kotlin.jvm.JvmSynthetic
        @kotlin.PublishedApi
        internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.RoleChangeMsg.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.RoleChangeMsg = _builder.build()

      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       */
      var senderRole: ru.nsu.fit.isachenko.snakegame.SnakesProto.NodeRole
        @JvmName("getSenderRole")
        get() = _builder.getSenderRole()
        @JvmName("setSenderRole")
        set(value) {
          _builder.setSenderRole(value)
        }
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       */
      fun clearSenderRole() {
        _builder.clearSenderRole()
      }
      /**
       * <code>optional .snakes.NodeRole sender_role = 1;</code>
       * @return Whether the senderRole field is set.
       */
      fun hasSenderRole(): kotlin.Boolean {
        return _builder.hasSenderRole()
      }

      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       */
      var receiverRole: ru.nsu.fit.isachenko.snakegame.SnakesProto.NodeRole
        @JvmName("getReceiverRole")
        get() = _builder.getReceiverRole()
        @JvmName("setReceiverRole")
        set(value) {
          _builder.setReceiverRole(value)
        }
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       */
      fun clearReceiverRole() {
        _builder.clearReceiverRole()
      }
      /**
       * <code>optional .snakes.NodeRole receiver_role = 2;</code>
       * @return Whether the receiverRole field is set.
       */
      fun hasReceiverRole(): kotlin.Boolean {
        return _builder.hasReceiverRole()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.PingMsg.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.PingMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.PingMsg =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.PingMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.SteerMsg.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.SteerMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.SteerMsg =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.SteerMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AckMsg.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.AckMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AckMsg =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.AckMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.StateMsg.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.StateMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.StateMsg =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.StateMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AnnouncementMsg.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.AnnouncementMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.AnnouncementMsg =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.AnnouncementMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.JoinMsg.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.JoinMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.JoinMsg =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.JoinMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.ErrorMsg.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.ErrorMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.ErrorMsg =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.ErrorMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.RoleChangeMsg.copy(block: ru.nsu.fit.isachenko.snakegame.GameMessageKt.RoleChangeMsgKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameMessage.RoleChangeMsg =
  ru.nsu.fit.isachenko.snakegame.GameMessageKt.RoleChangeMsgKt.Dsl._create(this.toBuilder()).apply { block() }._build()
