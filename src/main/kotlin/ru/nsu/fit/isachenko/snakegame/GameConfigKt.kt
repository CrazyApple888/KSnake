//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: snakes.proto

package ru.nsu.fit.isachenko.snakegame;

@kotlin.jvm.JvmSynthetic
inline fun gameConfig(block: ru.nsu.fit.isachenko.snakegame.GameConfigKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameConfig =
  ru.nsu.fit.isachenko.snakegame.GameConfigKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GameConfig.newBuilder()).apply { block() }._build()
object GameConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameConfig.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GameConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameConfig = _builder.build()

    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     */
    var width: kotlin.Int
      @JvmName("getWidth")
      get() = _builder.getWidth()
      @JvmName("setWidth")
      set(value) {
        _builder.setWidth(value)
      }
    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     */
    fun clearWidth() {
      _builder.clearWidth()
    }
    /**
     * <pre>
     * Ширина поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 width = 1 [default = 40];</code>
     * @return Whether the width field is set.
     */
    fun hasWidth(): kotlin.Boolean {
      return _builder.hasWidth()
    }

    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     */
    var height: kotlin.Int
      @JvmName("getHeight")
      get() = _builder.getHeight()
      @JvmName("setHeight")
      set(value) {
        _builder.setHeight(value)
      }
    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     */
    fun clearHeight() {
      _builder.clearHeight()
    }
    /**
     * <pre>
     * Высота поля в клетках (от 10 до 100)
     * </pre>
     *
     * <code>optional int32 height = 2 [default = 30];</code>
     * @return Whether the height field is set.
     */
    fun hasHeight(): kotlin.Boolean {
      return _builder.hasHeight()
    }

    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     */
    var foodStatic: kotlin.Int
      @JvmName("getFoodStatic")
      get() = _builder.getFoodStatic()
      @JvmName("setFoodStatic")
      set(value) {
        _builder.setFoodStatic(value)
      }
    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     */
    fun clearFoodStatic() {
      _builder.clearFoodStatic()
    }
    /**
     * <pre>
     * Количество клеток с едой, независимо от числа игроков (от 0 до 100)
     * </pre>
     *
     * <code>optional int32 food_static = 3 [default = 1];</code>
     * @return Whether the foodStatic field is set.
     */
    fun hasFoodStatic(): kotlin.Boolean {
      return _builder.hasFoodStatic()
    }

    /**
     * <pre>
     * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
     * </pre>
     *
     * <code>optional float food_per_player = 4 [default = 1];</code>
     */
    var foodPerPlayer: kotlin.Float
      @JvmName("getFoodPerPlayer")
      get() = _builder.getFoodPerPlayer()
      @JvmName("setFoodPerPlayer")
      set(value) {
        _builder.setFoodPerPlayer(value)
      }
    /**
     * <pre>
     * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
     * </pre>
     *
     * <code>optional float food_per_player = 4 [default = 1];</code>
     */
    fun clearFoodPerPlayer() {
      _builder.clearFoodPerPlayer()
    }
    /**
     * <pre>
     * Количество клеток с едой, на каждого игрока (вещественный коэффициент от 0 до 100)
     * </pre>
     *
     * <code>optional float food_per_player = 4 [default = 1];</code>
     * @return Whether the foodPerPlayer field is set.
     */
    fun hasFoodPerPlayer(): kotlin.Boolean {
      return _builder.hasFoodPerPlayer()
    }

    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     */
    var stateDelayMs: kotlin.Int
      @JvmName("getStateDelayMs")
      get() = _builder.getStateDelayMs()
      @JvmName("setStateDelayMs")
      set(value) {
        _builder.setStateDelayMs(value)
      }
    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     */
    fun clearStateDelayMs() {
      _builder.clearStateDelayMs()
    }
    /**
     * <pre>
     * Задержка между ходами (сменой состояний) в игре, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 state_delay_ms = 5 [default = 1000];</code>
     * @return Whether the stateDelayMs field is set.
     */
    fun hasStateDelayMs(): kotlin.Boolean {
      return _builder.hasStateDelayMs()
    }

    /**
     * <pre>
     * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
     * </pre>
     *
     * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
     */
    var deadFoodProb: kotlin.Float
      @JvmName("getDeadFoodProb")
      get() = _builder.getDeadFoodProb()
      @JvmName("setDeadFoodProb")
      set(value) {
        _builder.setDeadFoodProb(value)
      }
    /**
     * <pre>
     * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
     * </pre>
     *
     * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
     */
    fun clearDeadFoodProb() {
      _builder.clearDeadFoodProb()
    }
    /**
     * <pre>
     * Вероятность превращения мёртвой клетки в еду (от 0 до 1).
     * </pre>
     *
     * <code>optional float dead_food_prob = 6 [default = 0.1];</code>
     * @return Whether the deadFoodProb field is set.
     */
    fun hasDeadFoodProb(): kotlin.Boolean {
      return _builder.hasDeadFoodProb()
    }

    /**
     * <pre>
     * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
     */
    var pingDelayMs: kotlin.Int
      @JvmName("getPingDelayMs")
      get() = _builder.getPingDelayMs()
      @JvmName("setPingDelayMs")
      set(value) {
        _builder.setPingDelayMs(value)
      }
    /**
     * <pre>
     * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
     */
    fun clearPingDelayMs() {
      _builder.clearPingDelayMs()
    }
    /**
     * <pre>
     * Задержка между отправкой ping-сообщений, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 ping_delay_ms = 7 [default = 100];</code>
     * @return Whether the pingDelayMs field is set.
     */
    fun hasPingDelayMs(): kotlin.Boolean {
      return _builder.hasPingDelayMs()
    }

    /**
     * <pre>
     * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
     */
    var nodeTimeoutMs: kotlin.Int
      @JvmName("getNodeTimeoutMs")
      get() = _builder.getNodeTimeoutMs()
      @JvmName("setNodeTimeoutMs")
      set(value) {
        _builder.setNodeTimeoutMs(value)
      }
    /**
     * <pre>
     * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
     */
    fun clearNodeTimeoutMs() {
      _builder.clearNodeTimeoutMs()
    }
    /**
     * <pre>
     * Таймаут, после которого считаем что узел-сосед отпал, в миллисекундах (от 1 до 10000)
     * </pre>
     *
     * <code>optional int32 node_timeout_ms = 8 [default = 800];</code>
     * @return Whether the nodeTimeoutMs field is set.
     */
    fun hasNodeTimeoutMs(): kotlin.Boolean {
      return _builder.hasNodeTimeoutMs()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GameConfig.copy(block: ru.nsu.fit.isachenko.snakegame.GameConfigKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GameConfig =
  ru.nsu.fit.isachenko.snakegame.GameConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()
