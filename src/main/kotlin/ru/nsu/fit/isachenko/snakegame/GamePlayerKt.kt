//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: snakes.proto

package ru.nsu.fit.isachenko.snakegame;

@kotlin.jvm.JvmSynthetic
inline fun gamePlayer(block: ru.nsu.fit.isachenko.snakegame.GamePlayerKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GamePlayer =
  ru.nsu.fit.isachenko.snakegame.GamePlayerKt.Dsl._create(ru.nsu.fit.isachenko.snakegame.SnakesProto.GamePlayer.newBuilder()).apply { block() }._build()
object GamePlayerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GamePlayer.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: ru.nsu.fit.isachenko.snakegame.SnakesProto.GamePlayer.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): ru.nsu.fit.isachenko.snakegame.SnakesProto.GamePlayer = _builder.build()

    /**
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     */
    fun clearName() {
      _builder.clearName()
    }
    /**
     * <pre>
     * Имя игрока (для отображения в интерфейсе)
     * </pre>
     *
     * <code>required string name = 1;</code>
     * @return Whether the name field is set.
     */
    fun hasName(): kotlin.Boolean {
      return _builder.hasName()
    }

    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     */
    var id: kotlin.Int
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     */
    fun clearId() {
      _builder.clearId()
    }
    /**
     * <pre>
     * Уникальный идентификатор игрока в пределах игры
     * </pre>
     *
     * <code>required int32 id = 2;</code>
     * @return Whether the id field is set.
     */
    fun hasId(): kotlin.Boolean {
      return _builder.hasId()
    }

    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     *
     * <code>required string ip_address = 3;</code>
     */
    var ipAddress: kotlin.String
      @JvmName("getIpAddress")
      get() = _builder.getIpAddress()
      @JvmName("setIpAddress")
      set(value) {
        _builder.setIpAddress(value)
      }
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     *
     * <code>required string ip_address = 3;</code>
     */
    fun clearIpAddress() {
      _builder.clearIpAddress()
    }
    /**
     * <pre>
     * IPv4 или IPv6 адрес игрока в виде строки (отправитель не знает свой IP, поэтому указывает тут пустую строку)
     * </pre>
     *
     * <code>required string ip_address = 3;</code>
     * @return Whether the ipAddress field is set.
     */
    fun hasIpAddress(): kotlin.Boolean {
      return _builder.hasIpAddress()
    }

    /**
     * <pre>
     * Порт UDP-сокета игрока
     * </pre>
     *
     * <code>required int32 port = 4;</code>
     */
    var port: kotlin.Int
      @JvmName("getPort")
      get() = _builder.getPort()
      @JvmName("setPort")
      set(value) {
        _builder.setPort(value)
      }
    /**
     * <pre>
     * Порт UDP-сокета игрока
     * </pre>
     *
     * <code>required int32 port = 4;</code>
     */
    fun clearPort() {
      _builder.clearPort()
    }
    /**
     * <pre>
     * Порт UDP-сокета игрока
     * </pre>
     *
     * <code>required int32 port = 4;</code>
     * @return Whether the port field is set.
     */
    fun hasPort(): kotlin.Boolean {
      return _builder.hasPort()
    }

    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     */
    var role: ru.nsu.fit.isachenko.snakegame.SnakesProto.NodeRole
      @JvmName("getRole")
      get() = _builder.getRole()
      @JvmName("setRole")
      set(value) {
        _builder.setRole(value)
      }
    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     */
    fun clearRole() {
      _builder.clearRole()
    }
    /**
     * <pre>
     * Роль узла в топологии
     * </pre>
     *
     * <code>required .snakes.NodeRole role = 5;</code>
     * @return Whether the role field is set.
     */
    fun hasRole(): kotlin.Boolean {
      return _builder.hasRole()
    }

    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     */
    var type: ru.nsu.fit.isachenko.snakegame.SnakesProto.PlayerType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     */
    fun clearType() {
      _builder.clearType()
    }
    /**
     * <pre>
     * Тип игрока
     * </pre>
     *
     * <code>optional .snakes.PlayerType type = 6 [default = HUMAN];</code>
     * @return Whether the type field is set.
     */
    fun hasType(): kotlin.Boolean {
      return _builder.hasType()
    }

    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     */
    var score: kotlin.Int
      @JvmName("getScore")
      get() = _builder.getScore()
      @JvmName("setScore")
      set(value) {
        _builder.setScore(value)
      }
    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     */
    fun clearScore() {
      _builder.clearScore()
    }
    /**
     * <pre>
     * Число очков, которые набрал игрок
     * </pre>
     *
     * <code>required int32 score = 7;</code>
     * @return Whether the score field is set.
     */
    fun hasScore(): kotlin.Boolean {
      return _builder.hasScore()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun ru.nsu.fit.isachenko.snakegame.SnakesProto.GamePlayer.copy(block: ru.nsu.fit.isachenko.snakegame.GamePlayerKt.Dsl.() -> Unit): ru.nsu.fit.isachenko.snakegame.SnakesProto.GamePlayer =
  ru.nsu.fit.isachenko.snakegame.GamePlayerKt.Dsl._create(this.toBuilder()).apply { block() }._build()
